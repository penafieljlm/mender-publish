#!/bin/bash

# usage:
#  mender-publish [<image-name>]

# Ensure curl is installed
curl --help 2>&1 >/dev/null
if [ $? -ne 0 ]
then
    (>&2 echo "Error: Curl is not installed.")
    exit 1
fi

# Ensure python is installed
python --help 2>&1 >/dev/null
if [ $? -ne 0 ]
then
    (>&2 echo "Error: Python is not installed.")
    exit 1
fi

# Ensure build environment is initialized
bitbake --help 2>&1 >/dev/null
if [ "$?" -ne 0 ]
then
    (>&2 echo "Error: Build environment not initialized.")
    exit 1
fi

# Determine image name
IMAGE="$1"
if [ ! -n "${IMAGE}" ]
then
    (>&2 echo "Error: No image name provided.")
    exit 1
fi

# Determine image description
DESCRIPTION="$2"
if [ ! -n "${DESCRIPTION}" ]
then
    (>&2 echo "Error: No image description provided.")
    exit 1
fi

# Retrieve Mender parameters
MENDER_DEVICE_TYPE=$(bitbake -e | grep -P '^MENDER_DEVICE_TYPE=".+"$' | awk '{split($0,a,"="); print a[2]}' | sed -e 's/^"//' -e 's/"$//')
if [ ! -n "${MENDER_DEVICE_TYPE}" ]
then
    (>&2 echo "Error: Mender device type not found.")
    exit 1
fi
MENDER_SERVER_URL=$(bitbake -e | grep -P '^MENDER_SERVER_URL=".+"$' | awk '{split($0,a,"="); print a[2]}' | sed -e 's/^"//' -e 's/"$//')
if [ ! -n "${MENDER_SERVER_URL}" ]
then
    (>&2 echo "Error: Mender server URL not found.")
    exit 1
fi

# Locate Mender artifact
if [ -d "${BUILDDIR}/tmp" ]
then
    BUILDTMP="${BUILDDIR}/tmp"
else
    BUILDTMP="${BUILDDIR}/tmp-glibc"
fi
MENDER_ARTIFACT="${BUILDTMP}/deploy/images/${MENDER_DEVICE_TYPE}/${IMAGE}-${MENDER_DEVICE_TYPE}.mender"
if [ ! -f "${MENDER_ARTIFACT}" ]
then
    (>&2 echo "Error: Mender artifact not found (${MENDER_ARTIFACT}).")
    exit 1
fi
MENDER_ARTIFACT_REAL="$(readlink -f ${MENDER_ARTIFACT})"
if [ ! -f "${MENDER_ARTIFACT_REAL}" ]
then
    (>&2 echo "Error: Read Mender artifact not found (${MENDER_ARTIFACT_REAL}).")
    exit 1
fi
MENDER_ARTIFACT_SIZE=$(stat --printf="%s" "${MENDER_ARTIFACT_REAL}")

# Show script banner
echo
echo "Mender Publish Script"
echo "Author: John Lawrence M. Penafiel (penafieljlm)"
echo
echo "Image: ${IMAGE}"
echo "Description: ${DESCRIPTION}"
echo
echo "Device: ${MENDER_DEVICE_TYPE}"
echo "Server: ${MENDER_SERVER_URL}"
echo
echo "Artifact: "
echo "${MENDER_ARTIFACT_REAL}"
echo

# Perform Mender authentication
echo "Please enter your Mender credentials."
echo
MENDER_AUTH_URL="${MENDER_SERVER_URL}/api/management/v1/useradm/auth/login"
read -p "Username: " MENDER_AUTH_USERNAME
read -sp "Password: " MENDER_AUTH_PASSWORD
echo
echo
MENDER_AUTH_RESULT=$(curl -X POST -u "${MENDER_AUTH_USERNAME}:${MENDER_AUTH_PASSWORD}" "${MENDER_AUTH_URL}" 2>/dev/null)
MENDER_AUTH_ERROR=$(echo "${MENDER_AUTH_RESULT}" | python -c 'import sys, json; print json.load(sys.stdin)["error"];' 2>/dev/null)
if [ -n "${MENDER_AUTH_ERROR}" ]
then
    (>&2 echo "Error: $(tr '[:lower:]' '[:upper:]' <<< ${MENDER_AUTH_ERROR:0:1})${MENDER_AUTH_ERROR:1}.")
    exit 1
fi
MENDER_AUTH_TOKEN="${MENDER_AUTH_RESULT}"

# Upload the Mender artifact
echo "Uploading artifact: ${MENDER_ARTIFACT_REAL}..."
echo
MENDER_ARTIFACTS_URL="${MENDER_SERVER_URL}/api/management/v1/deployments/artifacts"
MENDER_ARTIFACTS_RESULT=$(curl -X POST \
    -H "Authorization: Bearer ${MENDER_AUTH_TOKEN}" \
    -F "description=${DESCRIPTION}" \
    -F "size=${MENDER_ARTIFACT_SIZE}" \
    -F "artifact=@${MENDER_ARTIFACT_REAL}" \
    "${MENDER_ARTIFACTS_URL}")
MENDER_ARTIFACTS_ERROR=$(echo "${MENDER_ARTIFACTS_RESULT}" | python -c 'import sys, json; print json.load(sys.stdin)["error"];' 2>/dev/null)
if [ -n "${MENDER_ARTIFACTS_ERROR}" ]
then
    (>&2 echo "Error: $(tr '[:lower:]' '[:upper:]' <<< ${MENDER_ARTIFACTS_ERROR:0:1})${MENDER_ARTIFACTS_ERROR:1}.")
    exit 1
fi

echo
